ok
ok
ok

-- Simple Functions.
module Test with
letrec {
  foo : Ptr# rT Obj -> Ptr# rT Obj
    = \(x : Ptr# rT Obj).
      let x1
            = let ^ = allocRawSmall [rT] TAG0# 8# in
              let ^ = payloadOfRawSmall [rT] ^0 in
              let _
                    = poke# [rT] [Nat#] (castPtr# [rT] [Nat#] [Word8#] ^0) 0# 3# in
              ^1 in
      let x2
            = let ^ = x1 in
              let ^ = payloadOfRawSmall [rT] ^0 in
              let ^
                    = peek# [rT] [Nat#] (castPtr# [rT] [Nat#] [Word8#] ^0) 0# in
              ^0 in
      let x3
            = let ^ = x in
              let ^ = payloadOfRawSmall [rT] ^0 in
              let ^
                    = peek# [rT] [Nat#] (castPtr# [rT] [Nat#] [Word8#] ^0) 0# in
              ^0 in
      let x4 = add# [Nat#] x2 x3 in
      let x0
            = let ^ = allocRawSmall [rT] TAG0# 8# in
              let ^ = payloadOfRawSmall [rT] ^0 in
              let _
                    = poke# [rT] [Nat#] (castPtr# [rT] [Nat#] [Word8#] ^0) 0# x4 in
              ^1 in
      let x5
            = let ^ = allocRawSmall [rT] TAG0# 8# in
              let ^ = payloadOfRawSmall [rT] ^0 in
              let _
                    = poke# [rT] [Nat#] (castPtr# [rT] [Nat#] [Word8#] ^0) 0# 2# in
              ^1 in
      let x6
            = let ^ = x5 in
              let ^ = payloadOfRawSmall [rT] ^0 in
              let ^
                    = peek# [rT] [Nat#] (castPtr# [rT] [Nat#] [Word8#] ^0) 0# in
              ^0 in
      let x7
            = let ^ = x0 in
              let ^ = payloadOfRawSmall [rT] ^0 in
              let ^
                    = peek# [rT] [Nat#] (castPtr# [rT] [Nat#] [Word8#] ^0) 0# in
              ^0 in
      let x8 = add# [Nat#] x6 x7 in
      let ^ = allocRawSmall [rT] TAG0# 8# in
      let ^ = payloadOfRawSmall [rT] ^0 in
      let _
            = poke# [rT] [Nat#] (castPtr# [rT] [Nat#] [Word8#] ^0) 0# x8 in
      ^1
}


-- Match aginst literal Bools.
module Test with
letrec {
  neg : Ptr# rT Obj -> Ptr# rT Obj
    = \(x : Ptr# rT Obj).
      let x0
            = let ^ = x in
              let ^ = payloadOfRawSmall [rT] ^0 in
              let ^
                    = peek# [rT] [Bool#] (castPtr# [rT] [Bool#] [Word8#] ^0) 0# in
              ^0 in
      case x0 of {
        True#  
         -> let ^ = allocRawSmall [rT] TAG0# 8# in
            let ^ = payloadOfRawSmall [rT] ^0 in
            let _
                  = poke# [rT] [Bool#] (castPtr# [rT] [Bool#] [Word8#] ^0) 0# False# in
            ^1;
        _ 
         -> let ^ = allocRawSmall [rT] TAG0# 8# in
            let ^ = payloadOfRawSmall [rT] ^0 in
            let _
                  = poke# [rT] [Bool#] (castPtr# [rT] [Bool#] [Word8#] ^0) 0# True# in
            ^1
      }
}


-- Match against literal Nat.
module Test with
letrec {
  foo : Ptr# rT Obj -> Ptr# rT Obj
    = \(x : Ptr# rT Obj).
      let x0
            = let ^ = x in
              let ^ = payloadOfRawSmall [rT] ^0 in
              let ^
                    = peek# [rT] [Nat#] (castPtr# [rT] [Nat#] [Word8#] ^0) 0# in
              ^0 in
      case x0 of {
        5#  
         -> let ^ = allocRawSmall [rT] TAG0# 8# in
            let ^ = payloadOfRawSmall [rT] ^0 in
            let _
                  = poke# [rT] [Nat#] (castPtr# [rT] [Nat#] [Word8#] ^0) 0# 6# in
            ^1;
        6#  
         -> let ^ = allocRawSmall [rT] TAG0# 8# in
            let ^ = payloadOfRawSmall [rT] ^0 in
            let _
                  = poke# [rT] [Nat#] (castPtr# [rT] [Nat#] [Word8#] ^0) 0# 7# in
            ^1;
        _ 
         -> let ^ = allocRawSmall [rT] TAG0# 8# in
            let ^ = payloadOfRawSmall [rT] ^0 in
            let _
                  = poke# [rT] [Nat#] (castPtr# [rT] [Nat#] [Word8#] ^0) 0# 0# in
            ^1
      }
}


-- Nested case expression.
module Test with
letrec {
  foo : Ptr# rT Obj -> Ptr# rT Obj -> Ptr# rT Obj
    = \(x y : Ptr# rT Obj).
      let x0
            = let ^ = x in
              let ^ = payloadOfRawSmall [rT] ^0 in
              let ^
                    = peek# [rT] [Nat#] (castPtr# [rT] [Nat#] [Word8#] ^0) 0# in
              ^0 in
      case x0 of {
        0#  
         -> let x1
                  = let ^ = y in
                    let ^ = payloadOfRawSmall [rT] ^0 in
                    let ^
                          = peek# [rT] [Nat#] (castPtr# [rT] [Nat#] [Word8#] ^0) 0# in
                    ^0 in
            case x1 of {
              0#  
               -> let ^ = allocRawSmall [rT] TAG0# 8# in
                  let ^ = payloadOfRawSmall [rT] ^0 in
                  let _
                        = poke# [rT] [Nat#] (castPtr# [rT] [Nat#] [Word8#] ^0) 0# 1# in
                  ^1;
              _ 
               -> let ^ = allocRawSmall [rT] TAG0# 8# in
                  let ^ = payloadOfRawSmall [rT] ^0 in
                  let _
                        = poke# [rT] [Nat#] (castPtr# [rT] [Nat#] [Word8#] ^0) 0# 0# in
                  ^1
            };
        _ 
         -> let ^ = allocRawSmall [rT] TAG0# 8# in
            let ^ = payloadOfRawSmall [rT] ^0 in
            let _
                  = poke# [rT] [Nat#] (castPtr# [rT] [Nat#] [Word8#] ^0) 0# 0# in
            ^1
      }
}


-- Full application of top-level function.
module Test with
letrec {
  add : Ptr# rT Obj -> Ptr# rT Obj -> Ptr# rT Obj
    = \(x y : Ptr# rT Obj).
      let x0
            = let ^ = x in
              let ^ = payloadOfRawSmall [rT] ^0 in
              let ^
                    = peek# [rT] [Nat#] (castPtr# [rT] [Nat#] [Word8#] ^0) 0# in
              ^0 in
      let x1
            = let ^ = y in
              let ^ = payloadOfRawSmall [rT] ^0 in
              let ^
                    = peek# [rT] [Nat#] (castPtr# [rT] [Nat#] [Word8#] ^0) 0# in
              ^0 in
      let x2 = add# [Nat#] x0 x1 in
      let ^ = allocRawSmall [rT] TAG0# 8# in
      let ^ = payloadOfRawSmall [rT] ^0 in
      let _
            = poke# [rT] [Nat#] (castPtr# [rT] [Nat#] [Word8#] ^0) 0# x2 in
      ^1;
  
  foo : Ptr# rT Obj -> Ptr# rT Obj
    = \(x : Ptr# rT Obj).
      let x3
            = let ^ = allocRawSmall [rT] TAG0# 8# in
              let ^ = payloadOfRawSmall [rT] ^0 in
              let _
                    = poke# [rT] [Nat#] (castPtr# [rT] [Nat#] [Word8#] ^0) 0# 5# in
              ^1 in
      add x x3
}


-- Flip an enumerated value.
module Test with
letrec {
  flipit : Ptr# rT Obj -> Ptr# rT Obj
    = \(x : Ptr# rT Obj).
      case tagOfObject [rT] x of {
        TAG0#  
         -> let ^ = allocBoxed [rT] TAG1# 0# in
            ^0;
        TAG1#  
         -> let ^ = allocBoxed [rT] TAG0# 0# in
            ^0;
        _ 
         -> fail# [Ptr# rT Obj]
      }
}


-- Function to take the head of a monomorphic list.
module Test with
letrec {
  head : Ptr# rT Obj -> Ptr# rT Obj
    = \(xx : Ptr# rT Obj).
      case tagOfObject [rT] xx of {
        TAG0#  
         -> let x
                  = getFieldOfBoxed [rT] [Ptr# rT Obj] xx 0# in
            x;
        _ 
         -> let ^ = allocRawSmall [rT] TAG0# 8# in
            let ^ = payloadOfRawSmall [rT] ^0 in
            let _
                  = poke# [rT] [Nat#] (castPtr# [rT] [Nat#] [Word8#] ^0) 0# 0# in
            ^1
      }
}


-- Function to take the head of a polymorphic list.
module Test with
letrec {
  head : [a$r : Region].Ptr# a$r Obj -> Ptr# rT Obj -> Ptr# a$r Obj
    = /\(a$r : Region).
       \(def : Ptr# a$r Obj).\(xx : Ptr# rT Obj).
      case tagOfObject [rT] xx of {
        TAG0#  
         -> let x
                  = getFieldOfBoxed [rT] [Ptr# a$r Obj] xx 0# in
            x;
        _ 
         -> def
      }
}


-- Case expressions on literals.
-- Need to unbox scrutinee.
module Test with
letrec {
  swap : Ptr# rT Obj -> Ptr# rT Obj
    = \(x : Ptr# rT Obj).
      let x0
            = let ^ = x in
              let ^ = payloadOfRawSmall [rT] ^0 in
              let ^
                    = peek# [rT] [Nat#] (castPtr# [rT] [Nat#] [Word8#] ^0) 0# in
              ^0 in
      case x0 of {
        0#  
         -> let ^ = allocRawSmall [rT] TAG0# 8# in
            let ^ = payloadOfRawSmall [rT] ^0 in
            let _
                  = poke# [rT] [Nat#] (castPtr# [rT] [Nat#] [Word8#] ^0) 0# 1# in
            ^1;
        _ 
         -> let ^ = allocRawSmall [rT] TAG0# 8# in
            let ^ = payloadOfRawSmall [rT] ^0 in
            let _
                  = poke# [rT] [Nat#] (castPtr# [rT] [Nat#] [Word8#] ^0) 0# 0# in
            ^1
      }
}


-- Polymorphically take the head of a list, where the element
-- is in the top-level region. In the Salt code the head function
-- is passed the top level region as the location of the element.
module Test with
letrec {
  head : [a$r : Region].Ptr# a$r Obj -> Ptr# rT Obj -> Ptr# a$r Obj
    = /\(a$r : Region).
       \(def : Ptr# a$r Obj).\(xx : Ptr# rT Obj).
      case tagOfObject [rT] xx of {
        TAG0#  
         -> let x
                  = getFieldOfBoxed [rT] [Ptr# a$r Obj] xx 0# in
            x;
        _ 
         -> def
      };
  
  foo : Ptr# rT Obj -> Ptr# rT Obj
    = \(_ : Ptr# rT Obj).
      let x0
            = let ^ = allocBoxed [rT] TAG1# 0# in
              ^0 in
      let x2
            = let ^ = allocRawSmall [rT] TAG0# 8# in
              let ^ = payloadOfRawSmall [rT] ^0 in
              let _
                    = poke# [rT] [Nat#] (castPtr# [rT] [Nat#] [Word8#] ^0) 0# 1# in
              ^1 in
      let x1
            = let ^ = allocBoxed [rT] TAG0# 2# in
              let _
                    = setFieldOfBoxed [rT] [Ptr# rT Obj] ^0 0# x2 in
              let _
                    = setFieldOfBoxed [rT] [Ptr# rT Obj] ^0 1# x0 in
              ^0 in
      let x3
            = let ^ = allocRawSmall [rT] TAG0# 8# in
              let ^ = payloadOfRawSmall [rT] ^0 in
              let _
                    = poke# [rT] [Nat#] (castPtr# [rT] [Nat#] [Word8#] ^0) 0# 0# in
              ^1 in
      head [rT] x3 x1
}


-- Polymorphically take the head of a list, where the element
-- has its own primary region annotation. In the Salt code the head
-- function is passed the top level region as the location of the element.
module Test with
letrec {
  head : [a$r : Region].Ptr# a$r Obj -> Ptr# rT Obj -> Ptr# a$r Obj
    = /\(a$r : Region).
       \(def : Ptr# a$r Obj).\(xx : Ptr# rT Obj).
      case tagOfObject [rT] xx of {
        TAG0#  
         -> let x
                  = getFieldOfBoxed [rT] [Ptr# a$r Obj] xx 0# in
            x;
        _ 
         -> def
      };
  
  foo : [r : Region].Ptr# rT Obj -> Ptr# r Obj
    = /\(r : Region).
       \(_ : Ptr# rT Obj).
      let x0
            = let ^ = allocBoxed [r] TAG0# 0# in
              ^0 in
      let x1
            = let ^ = allocBoxed [r] TAG1# 0# in
              ^0 in
      let x2
            = let ^ = allocBoxed [rT] TAG1# 0# in
              ^0 in
      let x3
            = let ^ = allocBoxed [rT] TAG0# 2# in
              let _
                    = setFieldOfBoxed [rT] [Ptr# r Obj] ^0 0# x1 in
              let _
                    = setFieldOfBoxed [rT] [Ptr# rT Obj] ^0 1# x2 in
              ^0 in
      head [r] x0 x3
}

