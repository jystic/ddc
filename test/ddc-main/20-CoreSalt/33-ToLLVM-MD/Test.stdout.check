ok
ok


-- Observable optimisations: GVN
-- Feed the output of this test to `opt -S -tbaa -basicaa -gvn -o - <test.ll>`
--
-- PROBLEM: since only load/stores can be annotated (and not function calls),
--    we have to inline addInt manually here.
--
ok
%s.Obj = type <{i64}>
@_DDC__heapTop = external global  i64
@_DDC__heapMax = external global  i64
declare external ccc i64 @malloc(i64 ) align 8
declare external ccc void @abort() align 8
declare external void @llvm.gcroot(i8** , i8* )
declare external void @llvm.memcpy.p0i8.p0i8.i64(i8* , i8* , i64 , i32 , i1 )

define internal fastcc i64 @x_plus_y_square(i64*  %x, i64*  %y, i64*  %z) align 8 gc "shadow-stack"  
{
l6.entry:
        %xval1.addr1 = ptrtoint i64* %x to i64
        %xval1.addr2 = add i64 %xval1.addr1, 0
        %xval1.ptr   = inttoptr i64 %xval1.addr2 to i64*
        %xval1       = load i64* %xval1.ptr,    !tbaa !4
        %yval1.addr1 = ptrtoint i64* %y to i64
        %yval1.addr2 = add i64 %yval1.addr1, 0
        %yval1.ptr   = inttoptr i64 %yval1.addr2 to i64*
        %yval1       = load i64* %yval1.ptr,    !tbaa !3
        %a           = add i64 %xval1, %yval1
        %_v7.addr1   = ptrtoint i64* %z to i64
        %_v8.addr2   = add i64 %_v7.addr1, 0
        %_v9.ptr     = inttoptr i64 %_v8.addr2 to i64*
        store i64 %a, i64* %_v9.ptr,    !tbaa !5
        %xval2.addr1 = ptrtoint i64* %x to i64
        %xval2.addr2 = add i64 %xval2.addr1, 0
        %xval2.ptr   = inttoptr i64 %xval2.addr2 to i64*
        %xval2       = load i64* %xval2.ptr,    !tbaa !4
        %yval2.addr1 = ptrtoint i64* %y to i64
        %yval2.addr2 = add i64 %yval2.addr1, 0
        %yval2.ptr   = inttoptr i64 %yval2.addr2 to i64*
        %yval2       = load i64* %yval2.ptr,    !tbaa !3
        %b           = add i64 %xval2, %yval2
        %_v10        = mul i64 %a, %b
        ret i64 %_v10
}



!5 = !{!"x_plus_y_square_rz", !2, i32 0}
!4 = !{!"x_plus_y_square_rx", !3, i32 0}
!3 = !{!"x_plus_y_square_ry", !2, i32 0}
!2 = !{!"x_plus_y_square_ROOT_1", null, i32 1}


-- Observable optimisations: GVN - constprop behaviour
ok
%s.Obj = type <{i64}>
@_DDC__heapTop = external global  i64
@_DDC__heapMax = external global  i64
declare external ccc i64 @malloc(i64 ) align 8
declare external ccc void @abort() align 8
declare external void @llvm.gcroot(i8** , i8* )
declare external void @llvm.memcpy.p0i8.p0i8.i64(i8* , i8* , i64 , i32 , i1 )

define internal fastcc i64 @nothing(i64*  %x) align 8 gc "shadow-stack"  
{
l4.entry:
        ret i64 42
}

define internal fastcc i64 @three_x_plus_one(i64*  %x) align 8 gc "shadow-stack"  
{
l9.entry:
        %a.addr1     = ptrtoint i64* %x to i64
        %a.addr2     = add i64 %a.addr1, 0
        %a.ptr       = inttoptr i64 %a.addr2 to i64*
        %a           = load i64* %a.ptr,    !tbaa !8
        %b           = add i64 %a, 1
        %_d10        = call fastcc i64 @nothing (i64* %x) 
        %c.addr1     = ptrtoint i64* %x to i64
        %c.addr2     = add i64 %c.addr1, 0
        %c.ptr       = inttoptr i64 %c.addr2 to i64*
        %c           = load i64* %c.ptr,    !tbaa !8
        %d           = mul i64 %c, 2
        %_v11        = add i64 %b, %d
        ret i64 %_v11
}



!3 = !{!"nothing_rx", !2, i32 0}
!2 = !{!"nothing_ROOT_1", null, i32 1}
!8 = !{!"three_x_plus_one_rx", !7, i32 1}
!7 = !{!"three_x_plus_one_ROOT_6", null, i32 1}


-- Observarble optimisations: LICM
ok
%s.Obj = type <{i64}>
@_DDC__heapTop = external global  i64
@_DDC__heapMax = external global  i64
declare external ccc i64 @malloc(i64 ) align 8
declare external ccc void @abort() align 8
declare external void @llvm.gcroot(i8** , i8* )
declare external void @llvm.memcpy.p0i8.p0i8.i64(i8* , i8* , i64 , i32 , i1 )

define internal fastcc i64 @go(i64*  %a, i64*  %x, i64*  %y, i64  %i) align 8 gc "shadow-stack"  
{
l6.entry:
        switch i64 %i, label %l9.default [ i64 42,label %l7.alt ]
l7.alt:
        ret i64 %i
l9.default:
        %yval.addr1  = ptrtoint i64* %y to i64
        %yval.addr2  = add i64 %yval.addr1, 0
        %yval.ptr    = inttoptr i64 %yval.addr2 to i64*
        %yval        = load i64* %yval.ptr,    !tbaa !5
        %yplustwo    = add i64 %yval, 2
        %_v10.addr1  = ptrtoint i64* %x to i64
        %_v11.addr2  = add i64 %_v10.addr1, 0
        %_v12.ptr    = inttoptr i64 %_v11.addr2 to i64*
        store i64 %yplustwo, i64* %_v12.ptr,    !tbaa !4
        %_v13.addr1  = ptrtoint i64* %a to i64
        %_v14.addr2  = add i64 %_v13.addr1, %i
        %_v15.ptr    = inttoptr i64 %_v14.addr2 to i64*
        store i64 %i, i64* %_v15.ptr,    !tbaa !3
        %nexti       = add i64 %i, 1
        %_v16        = tail call fastcc i64 @go (i64* %a, i64* %x, i64* %y, i64 %nexti) 
        ret i64 %_v16
}



!5 = !{!"go_ry", !2, i32 0}
!4 = !{!"go_rx", !2, i32 0}
!3 = !{!"go_ra", !2, i32 0}
!2 = !{!"go_ROOT_1", null, i32 1}



