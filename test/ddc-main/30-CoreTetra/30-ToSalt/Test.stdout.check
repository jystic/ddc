ok
ok

-- Set the builder explicitly so we get consistent object layouts.
ok


-------------------------------------------------------------------------------
-- Unboxed literal patterns.
module Test with
letrec {
  foo : Ptr# rT Obj -> Ptr# rT Obj
    = \(x : Ptr# rT Obj).
      let x0 : Word16#
            = let ^ : Ptr# rT Obj = x in
              let ^ : Ptr# rT Word8# = payloadOfRawSmall [rT] ^0 in
              let ^ : Word16#
                    = peek# [rT] [Word16#] (castPtr# [rT] [Word16#] [Word8#] ^0) 0# in
              ^0 in
      case x0 of {
        5w16#  
         -> let ^ : Ptr# rT Obj = allocRawSmall [rT] TAG0# 8# in
            let ^ : Ptr# rT Word8# = payloadOfRawSmall [rT] ^0 in
            let _ : Void#
                  = poke# [rT] [Word16#] (castPtr# [rT] [Word16#] [Word8#] ^0) 0# 6w16# in
            ^1;
        7w16#  
         -> let ^ : Ptr# rT Obj = allocRawSmall [rT] TAG0# 8# in
            let ^ : Ptr# rT Word8# = payloadOfRawSmall [rT] ^0 in
            let _ : Void#
                  = poke# [rT] [Word16#] (castPtr# [rT] [Word16#] [Word8#] ^0) 0# 8w16# in
            ^1;
        _ 
         -> let ^ : Ptr# rT Obj = allocRawSmall [rT] TAG0# 8# in
            let ^ : Ptr# rT Word8# = payloadOfRawSmall [rT] ^0 in
            let _ : Void#
                  = poke# [rT] [Word16#] (castPtr# [rT] [Word16#] [Word8#] ^0) 0# 0w16# in
            ^1
      }
}


module Test with
letrec {
  foo : Ptr# rT Obj -> Ptr# rT Obj
    = \(x : Ptr# rT Obj).
      let x0 : Word32#
            = let ^ : Ptr# rT Obj = x in
              let ^ : Ptr# rT Word8# = payloadOfRawSmall [rT] ^0 in
              let ^ : Word32#
                    = peek# [rT] [Word32#] (castPtr# [rT] [Word32#] [Word8#] ^0) 0# in
              ^0 in
      case x0 of {
        5w32#  
         -> let ^ : Ptr# rT Obj = allocRawSmall [rT] TAG0# 8# in
            let ^ : Ptr# rT Word8# = payloadOfRawSmall [rT] ^0 in
            let _ : Void#
                  = poke# [rT] [Word32#] (castPtr# [rT] [Word32#] [Word8#] ^0) 0# 6w32# in
            ^1;
        7w32#  
         -> let ^ : Ptr# rT Obj = allocRawSmall [rT] TAG0# 8# in
            let ^ : Ptr# rT Word8# = payloadOfRawSmall [rT] ^0 in
            let _ : Void#
                  = poke# [rT] [Word32#] (castPtr# [rT] [Word32#] [Word8#] ^0) 0# 8w32# in
            ^1;
        _ 
         -> let ^ : Ptr# rT Obj = allocRawSmall [rT] TAG0# 8# in
            let ^ : Ptr# rT Word8# = payloadOfRawSmall [rT] ^0 in
            let _ : Void#
                  = poke# [rT] [Word32#] (castPtr# [rT] [Word32#] [Word8#] ^0) 0# 0w32# in
            ^1
      }
}


module Test with
letrec {
  foo : Ptr# rT Obj -> Ptr# rT Obj
    = \(x : Ptr# rT Obj).
      let x0 : Word64#
            = let ^ : Ptr# rT Obj = x in
              let ^ : Ptr# rT Word8# = payloadOfRawSmall [rT] ^0 in
              let ^ : Word64#
                    = peek# [rT] [Word64#] (castPtr# [rT] [Word64#] [Word8#] ^0) 0# in
              ^0 in
      case x0 of {
        5w64#  
         -> let ^ : Ptr# rT Obj = allocRawSmall [rT] TAG0# 8# in
            let ^ : Ptr# rT Word8# = payloadOfRawSmall [rT] ^0 in
            let _ : Void#
                  = poke# [rT] [Word64#] (castPtr# [rT] [Word64#] [Word8#] ^0) 0# 6w64# in
            ^1;
        7w64#  
         -> let ^ : Ptr# rT Obj = allocRawSmall [rT] TAG0# 8# in
            let ^ : Ptr# rT Word8# = payloadOfRawSmall [rT] ^0 in
            let _ : Void#
                  = poke# [rT] [Word64#] (castPtr# [rT] [Word64#] [Word8#] ^0) 0# 8w64# in
            ^1;
        _ 
         -> let ^ : Ptr# rT Obj = allocRawSmall [rT] TAG0# 8# in
            let ^ : Ptr# rT Word8# = payloadOfRawSmall [rT] ^0 in
            let _ : Void#
                  = poke# [rT] [Word64#] (castPtr# [rT] [Word64#] [Word8#] ^0) 0# 0w64# in
            ^1
      }
}


-- Unboxed Bool pattern.
module Test with
letrec {
  foo : Ptr# rT Obj -> Ptr# rT Obj
    = \(x : Ptr# rT Obj).
      let x0 : Bool#
            = let ^ : Ptr# rT Obj = x in
              let ^ : Ptr# rT Word8# = payloadOfRawSmall [rT] ^0 in
              let ^ : Bool#
                    = peek# [rT] [Bool#] (castPtr# [rT] [Bool#] [Word8#] ^0) 0# in
              ^0 in
      case x0 of {
        True#  
         -> let ^ : Ptr# rT Obj = allocRawSmall [rT] TAG0# 8# in
            let ^ : Ptr# rT Word8# = payloadOfRawSmall [rT] ^0 in
            let _ : Void#
                  = poke# [rT] [Bool#] (castPtr# [rT] [Bool#] [Word8#] ^0) 0# False# in
            ^1;
        _ 
         -> let ^ : Ptr# rT Obj = allocRawSmall [rT] TAG0# 8# in
            let ^ : Ptr# rT Word8# = payloadOfRawSmall [rT] ^0 in
            let _ : Void#
                  = poke# [rT] [Bool#] (castPtr# [rT] [Bool#] [Word8#] ^0) 0# True# in
            ^1
      }
}


-- Compile nested function via lambda lifting.
Error loading module
  When checking expression.
    <batch>:53:12
    Cannot apply non-function
                  of type: [a : Data].a -> a
    
    with: id
              (\(x : Nat#). x)


-- Compile application of anonymous function.
module Test with
letrec {
  app : [a$r b$r : Region].Ptr# rT Obj -> Ptr# a$r Obj -> Ptr# b$r Obj
    = /\(a$r b$r : Region).
       \(f : Ptr# rT Obj).\(x : Ptr# a$r Obj).
      makePtr# [b$r] [Obj]
          (apply1 (takePtr# [rT] [Obj] f) (takePtr# [a$r] [Obj] x))
}


-- Construct a lists of units.
-- The head field of the Cons cells has no primary region.
module Test with
letrec {
  singleton : Ptr# rT Obj -> Ptr# rT Obj
    = \(x : Ptr# rT Obj).
      let x0 : Ptr# rT Obj
            = let ^ : Ptr# rT Obj = allocBoxed [rT] TAG0# 0# in
              ^0 in
      let ^ : Ptr# rT Obj = allocBoxed [rT] TAG1# 2# in
      let _ : Void#
            = setFieldOfBoxed [rT] [Ptr# rT Obj] ^0 0# x in
      let _ : Void#
            = setFieldOfBoxed [rT] [Ptr# rT Obj] ^0 1# x0 in
      ^0
}


-- Destruct a list of units.
-- The head field of the Cons cell has no primary region.
module Test with
letrec {
  headUnit : Ptr# rT Obj -> Ptr# rT Obj
    = \(xx : Ptr# rT Obj).
      case tagOfObject [rT] xx of {
        TAG1#  
         -> let x : Ptr# rT Obj
                  = getFieldOfBoxed [rT] [Ptr# rT Obj] xx 0# in
            x;
        TAG0#  
         -> allocBoxed [rT] TAG0# 0#;
        _ 
         -> fail# [Ptr# rT Obj]
      }
}


-- Keep witnesses arguments
Fragment violation when converting Tetra module to Salt module.
  Module is malformed.
  Invalid type constructor application Mutable r => Unit -> Word64#


-------------------------------------------------------------------------------
-- Trigger errors about unsupported features in the Tetra to Salt conversion.
ok

-- OK: Anonymous binders are namified on the way into the conversion.
module Test with
letrec {
  id : Ptr# rT Obj -> Ptr# rT Obj
    = \(x0 : Ptr# rT Obj). x0
}


-- Error: partial application of primitive data constructors is not supported.
Fragment violation when converting Tetra module to Salt module.
  Cannot convert expression.
    Partial application of primitive operators is not supported.
  
    with: add# [Nat#] 5


-- Error: partial application if user defined data constructors is not supported.
Fragment violation when converting Tetra module to Salt module.
  Cannot convert expression.
    Cannot convert partially applied data constructor.
  
    with: Thing x0


-- Error: partial application of primitive operators is not supported.
Fragment violation when converting Tetra module to Salt module.
  Cannot convert expression.
    Partial application of primitive operators is not supported.
  
    with: add# [Nat#] 5


-- OK: let expressions in nested contexts are normalized on the way in to
-- the conversion.
module Test with
letrec {
  id : [a$r : Region].Ptr# a$r Obj -> Ptr# a$r Obj
    = /\(a$r : Region).
       \(x : Ptr# a$r Obj). x;
  
  foo : Ptr# rT Obj -> Ptr# rT Obj
    = \(_ : Ptr# rT Obj).
      let x0 : Ptr# rT Obj
            = let ^ : Ptr# rT Obj = allocRawSmall [rT] TAG0# 8# in
              let ^ : Ptr# rT Word8# = payloadOfRawSmall [rT] ^0 in
              let _ : Void#
                    = poke# [rT] [Nat#] (castPtr# [rT] [Nat#] [Word8#] ^0) 0# 5# in
              ^1 in
      id [rT] x0
}


-- Error: higher kinded type arguments are not yet supported.
Fragment violation when converting Tetra module to Salt module.
  Cannot convert expression.
    Unsupported type argument to function or constructor.
    In particular, we don't yet handle higher kinded type arguments.
    
    See [Note: Salt conversion for higher kinded type arguments] in
    the implementation of the Tetra to Salt conversion.
    
    with application:  nothin [List] [Nat#] x0
  
    with: [List]


-------------------------------------------------------------------------------
-- Ok: we should be able to convert the Alloc, Read, Write caps,
-- even though conversion for the Ref primops isn't implemented yet.
module Test with
letrec {
  blerk : Ptr# rT Obj -> Ptr# rT Obj
    = \(_ : Ptr# rT Obj).
      private r with {Alloc r; Read r; Write r} in
      let ^ : Ptr# rT Obj = allocRawSmall [rT] TAG0# 8# in
      let ^ : Ptr# rT Word8# = payloadOfRawSmall [rT] ^0 in
      let _ : Void#
            = poke# [rT] [Nat#] (castPtr# [rT] [Nat#] [Word8#] ^0) 0# 5# in
      ^1
}


