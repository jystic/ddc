-- | Primitives for constructing and destructing 64-bit heap objects.
--
--   IMPORTANT: Only one of 'Object64' or 'Object32' is linked into the DDC
--   runtime system. It is also the /only/ module that knows about the layout
--   of heap objects. All access to heap objects must go through the interface
--   provided by this module. 
--
--   All 64-bit heap objects start with a 32-bit word containing the constructor
--   tag of the object and a format field in the least-significant byte.
--
--   OBJECT
--   ~~~~~~
--   byte    3    2    1     0          (in MSB order)
--          TAG2 TAG1 TAG0 FORMAT ... 
--
--
--   FORMAT field
--   ~~~~~~~~~~~~
--   bit     7  6  5  4  3  2  1  0
--           -- arg ---  -- obj ---
--           X  X  X  X  X  X  0  0  -- Forward / Broken-Heart
--           X  X  X  X  a  X  X  X  -- Anchor flag
--           0  0  0  1  a  0  0  1  -- Thunk
--           0  0  1  0  a  0  0  1  -- DataBoxed
--           0  0  1  1  a  0  0  1  -- DataRaw
--           0  1  0  0  a  0  0  1  -- DataMixed
--           0  1  0  1  a  0  0  1  -- SuspIndir
--           -- size --  a  0  1  1  -- DataRawSmall
-- 
--   Data GC Forwarding / Broken-Heart pointers.
--     During garbage collection, after the GC copies an object to the
--     "to-space" its header in the "from-space" is overwritten with a pointer
--     to where the "to-space" version of the object is.
-- 
--     We can identify these pointers because their lowest 2 bits are always 00.
--     This is because objects in the heap are always 4-byte aligned.
-- 
--     For all other values of the format field, we ensure the lowest two bits
--     are not 00.
-- 
--   Data Anchor flag
--     If bit 3 in the format field is set then the GC is not permitted to move
--     the object. This is useful when the object has been allocated by malloc
--     and exists outside the DDC runtime's garbage collected heap.
-- 
--   Data Data{Boxed, Mixed, Raw, RawSmall}
--     There are four data object formats:
--      DataBoxed:    A boxed object containing pointers to more heap objects.
--      DataMixed:    Some heap pointers, and some raw data.
--      DataRaw:      Contains raw data and no pointers.
--      DataRawSmall: Contains raw data where the size is small enough to 
--                    encode directly in the format field.
-- 
--     The -obj- (object mode) portion of the format field can be used to
--     determine if the object is a forwarding pointer, has a fixed value for
--     its format field, or is a DataRS object.
--
--
--   FORMAT enum
--   ~~~~~~~~~~~
--   Code which needs to query the format of a heap object can use
--     `formatOfObject`, which transforms the format field described above in
--     to a more direct representation:
--
--      Unknown      = 0#
--      Forward      = 1#
--      Thunk        = 2#
--      DataBoxed    = 3#
--      DataRaw      = 4#
--      DataMixed    = 5#
--      DataRawSmall = 6#
--      SuspIndir    = 7#
--
-- 
--   Note: 64-bit floats.
--   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
--   The various object formats always contain an even number of 32-bit words
--   in the header portion, before the payload. This ensures that the payloads
--   of all heap objects are 8-byte aligned. We do this to support architectures
--   that cannot load misaligned double precision floats (Float64). Architectures
--   that can load them typically suffer a penalty, so it is good to align heap
--   objects anyway.
--
module  Object 

export value
  tagOfObject       : [r : Region]. Ptr# r Obj -> Tag#
  formatOfObject    : [r : Region]. Ptr# r Obj -> Nat#
  sizeOfObject      : [r : Region]. Ptr# r Obj -> Nat#

  readBrokenHeart   : [r1 r2 : Region]. Ptr# r1 Obj -> Ptr# r2 Obj
  writeBrokenHeart  : [r1 r2 : Region]. Ptr# r1 Obj -> Ptr# r2 Obj -> Void#

  isAnchored        : [r : Region]. Ptr# r Obj -> Bool#

  allocThunk        : [r : Region]. Addr# -> Nat# -> Nat# -> Nat# -> Nat# -> Ptr# r Obj
  setFieldOfThunk   : [r : Region]. Ptr# r Obj  -> Nat# -> Nat# -> Addr# -> Void#
  paramsOfThunk     : [r : Region]. Ptr# r Obj  -> Nat#
  boxesOfThunk      : [r : Region]. Ptr# r Obj  -> Nat#
  argsOfThunk       : [r : Region]. Ptr# r Obj  -> Nat#
  runsOfThunk       : [r : Region]. Ptr# r Obj  -> Nat#
  fieldOfThunk      : [r : Region]. Ptr# r Obj  -> Nat# -> Addr#
  extendThunk       : [r1 r2 : Region]. Ptr# r1 Obj -> Nat# -> Ptr# r2 Obj
  copyArgsOfThunk   : [r1 r2 : Region]. Ptr# r1 Obj -> Ptr# r2 Obj 
                                                    -> Nat# -> Nat# -> Ptr# r2 Obj

  allocBoxed        : [r : Region]. Tag# -> Nat# -> Ptr# r Obj
  arityOfBoxed      : [r : Region]. Ptr# r Obj -> Nat#
  fieldOfBoxed      : [r : Region]. Ptr# r Obj -> Nat# -> Ptr# r Obj
  getFieldOfBoxed   : [r : Region]. [a : Data]. Ptr# r Obj -> Nat# -> a
  setFieldOfBoxed   : [r : Region]. [a : Data]. Ptr# r Obj -> Nat# -> a -> Void#

  allocMixed        : [r : Region]. Tag# -> Nat# -> Nat# -> Ptr# r Obj
  arityOfMixed      : [r : Region]. Ptr# r Obj -> Nat#
  fieldOfMixed      : [r : Region]. Ptr# r Obj -> Nat# -> Ptr# r Obj
  payloadOfMixed    : [r : Region]. Ptr# r Obj -> Ptr# r Word8#

  allocRaw          : [r : Region]. Tag# -> Nat# -> Ptr# r Obj
  payloadOfRaw      : [r : Region]. Ptr# r Obj -> Ptr# r Word8#

  allocRawSmall     : [r : Region]. Tag# -> Nat# -> Ptr# r Obj
  payloadOfRawSmall : [r : Region]. Ptr# r Obj -> Ptr# r Word8#

  apply0            : Addr# -> Addr#
  apply1            : Addr# -> Addr# -> Addr#
  apply2            : Addr# -> Addr# -> Addr# -> Addr#
  apply3            : Addr# -> Addr# -> Addr# -> Addr# -> Addr#
  apply4            : Addr# -> Addr# -> Addr# -> Addr# -> Addr# -> Addr#

  -- Mutable references.
  allocRef          : [r1 r2 : Region]. Ptr# r2 Obj -> Ptr# r1 Obj
  writeRef          : [r1 r2 : Region]. Ptr# r1 Obj -> Ptr# r2 Obj -> Void#
  readRef           : [r1 r2 : Region]. Ptr# r1 Obj -> Ptr# r2 Obj

  -- Arrays of pointers to boxed values.
  allocArray        : [r1 r2 : Region]. [a : Data]. Nat# -> Ptr# r1 Obj -> Ptr# r2 Obj
  writeArray        : [r1 r2 : Region]. Ptr# r1 Obj -> Nat# -> Ptr# r2 Obj -> Void#
  readArray         : [r1 r2 : Region]. Ptr# r1 Obj -> Nat# -> Ptr# r2 Obj
  fillArray         : [r1 r2 : Region]. [a : Data]
                    . Ptr# r1 Obj -> Nat# -> Nat# -> Ptr# r2 Obj -> Ptr# r1 Obj

  -- Blocks of memory with a header word but uninterpreted payload.
  allocBlock        : [r : Region]. [a : Data]. Nat# -> Ptr# r Obj
  payloadOfBlock    : [r : Region]. Ptr# r Obj -> Ptr# r Word8#

import value
  allocCollect      : Nat# -> Unit

with letrec

-- Object ---------------------------------------------------------------------
-- | Get the header bits of an object.
headerOfObject [r : Region] (obj : Ptr# r Obj) : Word32#
 = do
        ptr             = castPtr# obj
        peek# ptr 0#


-- | Get the constructor tag of an object.
tagOfObject [r : Region] (obj : Ptr# r Obj) : Tag#
 = do
        header          = headerOfObject obj
        tag32           = shr#  header 8w32#
        promote# tag32


--| Get the format field bits of an object.
formatFieldOfObject [r : Region] (obj : Ptr# r Obj) : Word8#
 = do
        header          = headerOfObject obj
        truncate# [Word8#] [Word32#] header


-- | Get the arg portion of an object's format field.
argOfObject [r : Region] (obj : Ptr# r Obj) : Nat#
 = do
        formatField     = formatFieldOfObject obj
        arg8            = shl# (band# formatField 0b11110000w8#) 4w8#

        promote# arg8


--| Get the format of an object.
formatOfObject [r : Region] (obj : Ptr# r Obj) : Nat#
 = do
        formatField     = formatFieldOfObject obj

        case band# formatField 0b11w8# of
          0b00w8# -> 1# -- Forward
          0b01w8# -> formatOfObject_arg formatField
          0b11w8# -> 6# -- DataRawSmall
          _       -> 0# -- Unknown

formatOfObject_arg [r : Region] (formatField : Word8#) : Nat#
 = do
        case band# formatField 0b11110000w8# of
          0b00010000w8# -> 2# -- Thunk
          0b00100000w8# -> 3# -- DataBoxed
          0b00110000w8# -> 4# -- DataRaw
          0b01000000w8# -> 5# -- DataMixed
          0b01010000w8# -> 7# -- SuspIndir
          _             -> 0# -- Unknown


--| Get the size of an object.
sizeOfObject [r : Region] (obj : Ptr# r Obj) : Nat#
  = do
        s = case formatOfObject obj of
              2# -> sizeOfThunk     obj
              3# -> sizeOfBoxed     obj
              4# -> sizeOfRaw       obj
              5# -> sizeOfMixed     obj
              6# -> sizeOfRawSmall  obj
           -- 7# -> sizeOfSuspIndir obj -- ISSUE #341: SuspIndir not implemented
              _  -> fail#

        case eq# s 0# of
          True#  -> fail#
          False# -> s


-- Forwarding Pointers --------------------------------------------------------
--   When an object is moved from the 'from' space to the 'to' space,
--   its header is overwritten with a forwarding pointer (aka broken heart)
--   to its new location.
--   
--   This forwarding pointer is written over the 32 bit header of the object in
--   the from space. As heap objects are always 4 byte aligned, the lowest
--   two bits of the pointer are zero, and we use this to distinguish forwarding
--   pointers from regular objects.
--
--   The header is only 32 bits, but we need to store a 64 bit pointer.
--
--   We have to put the LOW half in the header, so that the lowest two bits are
--   still zero. The HIGH half goes after this. This happens automatically on
--   little-endian systems, but on big-endian systems we have to do it manually.


-- | Reads a forwarding pointer from an overwritten heap object.
readBrokenHeart
        [r1 r2 : Region]
        (obj   : Ptr# r1 Obj)
               : Ptr# r2 Obj
 =      readBrokenHeart_le obj

readBrokenHeart_le
        [r1 r2 : Region]
        (obj   : Ptr# r1 Obj)
               : Ptr# r2 Obj
 =      read# (takePtr# obj) 0#


-- | Replaces a heap object with a forwarding pointer to its new location.
writeBrokenHeart
        [r1 r2  : Region]
        (obj    : Ptr# r1 Obj)
        (newObj : Ptr# r2 Obj)
                : Void#
 =      writeBrokenHeart_le obj newObj

writeBrokenHeart_le
        [r1 r2  : Region]
        (obj    : Ptr# r1 Obj)
        (newObj : Ptr# r2 Obj)
                : Void#
 =      write# (takePtr# obj) 0# newObj


-- Anchored Objects -----------------------------------------------------------
-- | Check if an object is anchored. Anchored objects are allocated outside of
--   the DDC heap and will be left alone by the garbage collector.

isAnchored [r : Region] (obj : Ptr# r Obj) : Bool#
 = do
        formatField     = formatFieldOfObject obj

        case band# formatField 0b1000w8# of
          0b1000w8# -> True#
          _         -> False#


-- Thunk ----------------------------------------------------------------------
-- | Allocate a Thunk
--   The payload contains a code pointer to the top-level supercombinator,
--   along with pointers to any available arguments. The actual pointer values
--   for the arguments are undefined. 
--
--   Note that unlike the GHC runtime we don't use a separate PAP 
--   (Partial Application) object type to store partially applied arguments.
--   To perform a partial application we just create a new Thunk, copy the old
--   arguments into it, and write the extra partially applied arguments into the
--   new thunk. This is done to keep the implementation complexity down, and we
--   haven't performed any concrete performance comparisons between the two
--   approaches.
--   
--   For the GHC approach see: 
--    How to make a fast curry, push/enter vs eval apply.
--    Simon Marlow and Simon Peyton Jones.
--    Journal of Functional Programming, 2006.
--
--   A thunk wraps a top-level super of the following form:
--    f = /\a1 .. /\an. \x1 .. \xn. box .. box. body
--
--   The type   parameters a1 .. an are not represented at runtime.
--
--   The value  parameters x1 .. xn are counted in the boxes field.
--    We need to collect this many applied arguments in the thunk before
--    we can call the super.
--
--   The boxes  box .. box are counted in the boxes field of the thunk.
--    We need to run the thunk this many times before calling the super.
--    the expression 'box body' is equivalent to (\(_ : Void#). body), 
--    and running it eliminates the outer lambda.
--
--   typedef struct
--   {   uint32_t  tagFormat;     // Constructor tag and format field.
--       uint8_t   params;        // Value parameters of super.
--       uint8_t   boxes;         // Number of runs required.
--       uint8_t   args;          // Available arguments.
--       uint8_t   runs;          // Number of times we've been run so far.
--       Fun*      fun;           // Function pointer.
--       Obj*      payload[];     // Pointers to available arguments.
--   } Thunk;
--
allocThunk [r : Region] (fun : Addr#) 
        (params : Nat#) (boxes : Nat#) 
        (args   : Nat#) (runs  : Nat#)
        : Ptr# r Obj
 = do
        bytesObj        = sizeOfThunk_args args

        case check# bytesObj of
         True#  -> ()
         False# -> allocCollect bytesObj

        allocThunk_ok fun params boxes args runs bytesObj

allocThunk_ok [r  : Region] (fun : Addr#) 
        (params   : Nat#) (boxes : Nat#)
        (args     : Nat#) (runs  : Nat#)
        (bytesObj : Nat#)
        : Ptr# r Obj
 = do   
        addr            = alloc# bytesObj

        -- The tag of thunks is set to all 1 bits to make them easy to identify.
        tag32           = 0xffffff00w32#
        format          = 0b00010001w32#
        header          = bor# tag32 format
        write# addr 0# header

        -- Truncate params to 8-bits and write to object.
        params8         = truncate# [Word8#] [Nat#] params
        write# addr 4# params8

        -- Truncate boxes  to 8-bits and write to object.
        boxes8          = truncate# [Word8#] [Nat#] boxes
        write# addr 5# boxes8

        -- Truncate args count to 8-bits and write to object.
        args8           = truncate# [Word8#] [Nat#] args
        write# addr 6# args8

        -- Truncate runs count to 8-bits and write to object.
        runs8           = truncate# [Word8#] [Nat#] runs
        write# addr 7# runs8

        -- Write the function pointer.
        write# addr 8# fun

        makePtr# addr


-- | Determine the total size of a thunk.
sizeOfThunk [r : Region] (obj : Ptr# r Obj) : Nat#
 =      sizeOfThunk_args (argsOfThunk obj)

-- | Determine the total size of a thunk, given the number of arguments it has.
sizeOfThunk_args (args : Nat#) : Nat#
 = do
        -- The payload needs to be big enough to store pointers to the 
        -- current available args.
        bytesPayload    = shl# args (size2# [Addr#])

        bytesObj        = add# (size# [Word32#])        -- tagFormat word.
                         (add# (size# [Word32#])        -- params/boxes/args/runs.
                         (add# (size# [Word64#])        -- function pointer.
                                bytesPayload))          -- function args.

        bytesObj


-- | Set one of the pointers in a thunk.
--   The value is just a plain Addr# because we don't know what region the
--   original pointer in the Thunk was pointing to. Also, when setting these
--   pointers for the first time the pointer values in the thunk are undefined.
--   This takes a 'base' and 'offset' parameter separately to allow for easier
--   code generation.
setFieldOfThunk
        [r : Region] 
        (obj : Ptr# r Obj) (base : Nat#) (offset : Nat#) (val : Addr#) : Void#
 =      write# (takePtr# obj)
               (add# 16# (shl# (add# base offset) (size2# [Addr#])))
               val


-- | Get the function pointer from a thunk.
funOfThunk       [r : Region] (obj : Ptr# r Obj) : Addr#
 =      read#    [Addr#] (takePtr# obj) 8#


-- | Get the function pointer from a thunk.
--   We really want an Any region here, instead of having to cast this to 
--   and Addr# when we don't know what region the thunk is in.
funOfThunkA      [r : Region] (obj : Addr#) : Addr#
 =      read#   [Addr#] obj 8#


-- | Get the arity of the function in a thunk.
paramsOfThunk     [r : Region] (obj : Ptr# r Obj) : Nat#
 =      promote# (read# [Word8#] (takePtr# obj) 4#)


-- | Get the arity of the function in a thunk.
paramsOfThunkA    [r : Region] (obj : Addr#) : Nat#
 =      promote# (read# [Word8#] obj 4#)


-- | Get the count of available arguments in a thunk.
boxesOfThunk    [r : Region] (obj : Ptr# r Obj) : Nat#
 =      promote# (read# [Word8#] (takePtr# obj) 5#)


-- | Get the count of available arguments in a thunk.
argsOfThunk    [r : Region] (obj : Ptr# r Obj) : Nat#
 =      promote# (read# [Word8#] (takePtr# obj) 6#)


-- | Get the count of available arguments in a thunk.
runsOfThunk    [r : Region] (obj : Ptr# r Obj) : Nat#
 =      promote# (read# [Word8#] (takePtr# obj) 7#)


-- | Get one of the arguments from a thunk.
fieldOfThunk    [r1 : Region] (obj : Ptr# r1 Obj) (index : Nat#) : Addr#
 =      read#  (takePtr# obj)
               (add# 16# (shl# index (size2# [Addr#])))


-- | Get one of the arguments from a thunk.
fieldOfThunkA   [r1 : Region] (obj : Addr#) (index : Nat#) : Addr#
 =      read#   obj
               (add# 16# (shl# index (size2# [Addr#])))


-- | Copy a thunk while extending the number of available argument slots.
--   This is used when implementing both the curryN# and applyN# core primops.
extendThunk 
        [rSrc rDst : Region] 
        (src : Ptr# rSrc Obj) (more : Nat#) : Ptr# rDst Obj
 = do
        -- Function pointer and arity of that function.
        fun     = funOfThunk    src
        params  = paramsOfThunk src
        boxes   = boxesOfThunk  src

        -- Available arguments in source and destination.
        args    = argsOfThunk   src
        args'   = add# args     more

        -- Number of times the thunk has been run
        runs    = runsOfThunk src

        -- Allocate a new thunk with the orignal function and arity.
        dst     = allocThunk [rDst] (funOfThunk src) params boxes args' runs

        -- Copy argument pointers from the source into the new thunk.
        copyArgsOfThunk src dst 0# args


-- | Copy the available arguments from one thunk to another.
copyArgsOfThunk
        [rSrc rDst : Region]
        (src   : Ptr# rSrc Obj) (dst : Ptr# rDst Obj) 
        (index : Nat#)          (len : Nat#)
        : Ptr# rDst Obj
 = case ge# index len of
        True#   -> dst
        False# 
         -> do  ptr     = fieldOfThunk src index
                setFieldOfThunk dst 0#  index ptr
                copyArgsOfThunk src dst (add# index 1#) len


-- Boxed ----------------------------------------------------------------------
-- | Allocate a Boxed Data Object.
--   The payload contains pointers to other heap objects.
--
--   The arity must be no greater than 2^32, else undefined.
--   This object type is typically used for algebraic data, which won't have
--   more than 2^32 fields.
--
--   typedef struct
--   {    uint32_t  tagFormat;    // Constructor tag and format field.
--        uint32_t  arity;        // Arity of the data constructor.
--                                //  (The number of pointers in the payload)
--        ObjData   payload[];    
--   } DataBoxed;
--    
allocBoxed
        [r : Region]
        (tag : Tag#) (arity : Nat#) : Ptr# r Obj
 = do   
        bytesObj        = sizeOfBoxed_arity arity

        case check# bytesObj of
         True#  -> ()
         False# -> allocCollect bytesObj

        allocBoxed_ok tag arity bytesObj

allocBoxed_ok
        [r : Region]
        (tag : Tag#) (arity : Nat#) (bytesObj : Nat#) : Ptr# r Obj
 = do   
        addr            = alloc# bytesObj

        tag32           = promote# [Word32#] [Tag#] tag
        format          = 0b00100001w32#
        header          = bor# (shl# tag32 8w32#) format
        write# addr 0# header

        -- Truncate arity to 32-bits.
        arity32         = truncate# [Word32#] [Nat#] arity
        write# addr 4# arity32

        makePtr# addr


-- | Determine the total size of a boxed data object.
sizeOfBoxed [r : Region] (obj : Ptr# r Obj) : Nat#
 =      sizeOfBoxed_arity (arityOfBoxed obj)

-- | Determine the total size of a boxed data object, given the number of
--   pointers in its payload.
sizeOfBoxed_arity (arity : Nat#) : Nat#
 = do
        -- Multiple arity by 8 bytes-per-pointer to get size of payload.
        bytesPayload    = shl# arity (size2# [Addr#])
        bytesObj        = add# (size# [Word32#])
                         (add# (size# [Word32#]) bytesPayload)

        bytesObj


-- | Get one of the pointers from a boxed data object.
fieldOfBoxed
        [r     : Region]
        (obj   : Ptr# r Obj)
        (index : Nat#)
               : Ptr# r Obj
 =      read#  (takePtr# obj)
               (add# 8# (shl# index (size2# [Addr#])))


-- | Get one of the pointers from a boxed data object.
getFieldOfBoxed 
        [r1 : Region] [a : Data]
        (obj : Ptr# r1 Obj) (index : Nat#) 
        : a
 =      read#  (takePtr# obj)
               (add# 8# (shl# index (size2# [Addr#])))


-- | Set one of the pointers from a boxed data object.
setFieldOfBoxed 
        [r1 : Region] [a : Data] 
        (obj : Ptr# r1 Obj) (index : Nat#) (val : a) : Void#
 =      write# (takePtr# obj)
               (add# 8# (shl# index (size2# [Addr#])))
               val


-- | Get the number of pointers in a boxed data object's payload.
arityOfBoxed [r : Region] (obj : Ptr# r Obj) : Nat#
 =      promote# (read# [Word32#] (takePtr# obj) 4#)


-- Mixed ----------------------------------------------------------------------
-- | Allocate a Mixed Data Object.
--   The payload contains some pointers followed by raw data.
--
--   The arity (ptrCount) must be no greater than 2^32, else undefined.
--   The payload can have length up to 2^64.
--
--   typedef struct 
--   { uint32_t  tagFormat;
--     uint32_t  ptrCount;  // Number of pointers at the start of the payload.
--     uint64_t  size;      // Size of the whole object, in bytes.
--     ObjData   payload[]; // Contains ptrCount pointers, then raw data.
--   } DataMixed;
--
allocMixed 
        [r : Region]
        (tag : Tag#) (arity : Nat#) (bytesRaw : Nat#) : Ptr# r Obj
 = do   
        bytesPtrs       = shl# arity 3#
        bytesObj        = add# (size# [Word32#])
                         (add# (size# [Word32#])
                         (add# (size# [Word64#])
                         (add# bytesPtrs bytesRaw)))

        case check# bytesObj of
         True#  -> ()
         False# -> allocCollect bytesObj

        allocMixed_ok [r] tag arity bytesObj

allocMixed_ok
        [r : Region]
        (tag : Tag#) (arity : Nat#) (bytesObj : Nat#) : Ptr# r Obj
 = do
        addr            = alloc# bytesObj

        tag32           = promote# tag
        format          = 0b01000001w32#
        header          = bor# (shl# tag32 8w32#) format
        write# addr 0# header

        arity32         = truncate# [Word32#] [Nat#] arity
        write# addr 4# arity32

        bytesObj32      = promote#  [Word64#] [Nat#] bytesObj
        write# addr 8# bytesObj32

        makePtr# addr


-- | Determine the total size of a mixed data object.
sizeOfMixed [r : Region] (obj : Ptr# r Obj) : Nat#
 =      promote# (read# [Word64#] (takePtr# obj) 8#)


-- | Get one of the pointers from a mixed data object.
fieldOfMixed [r : Region] (obj : Ptr# r Obj) (index : Nat#) : Ptr# r Obj
 = do   
        offset          = add# 16# 
                         (shl# index (size2# [Addr#]))

        plusPtr# obj offset
      

-- | Get the number of pointers in a mixed data object's payload.
arityOfMixed [r : Region] (obj : Ptr# r Obj) : Nat#
 =      promote# (read# [Word32#] (takePtr# obj) 4#)


-- | Get the address of the raw data payload from a mixed object.
payloadOfMixed [r : Region] (obj : Ptr# r Obj) : Ptr# r Word8#
 =      plusPtr# (castPtr# obj) 16#


-- Raw ------------------------------------------------------------------------
-- | A Raw Data Object.
--   A raw data object does not contain heap pointers that need to be traced
--   by the garbage collector.
--
--   The payload size must be no greater than (2^32 - 8), else undefined.
-- 
--   typedef struct 
--   { uint32_t  tagFormat;  // Constructor tag and format field.
--     uint32_t  size;       // Size of the whole object, in bytes.
--     uint8_t   payload[];  // Raw data that does not contain heap pointers.
--   } DataRaw;
--
allocRaw
        [r : Region] (tag : Tag#) (bytesPayload : Nat#) : Ptr# r Obj
 = do   
        bytesObj        = add# (size# [Word32#])
                         (add# (size# [Word32#]) bytesPayload)

        case check# bytesObj of
         True#  -> ()
         False# -> allocCollect bytesObj

        allocRaw_ok tag bytesObj

allocRaw_ok 
        [r : Region] (tag : Tag#) (bytesObj : Nat#) : Ptr# r Obj
 = do
        addr            = alloc# bytesObj

        tag32           = promote# tag
        format          = 0b00110001w32#
        header          = bor# (shl# tag32 8w32#) format
        write# addr 0# header

        bytesObj32      = truncate# [Word32#] [Nat#] bytesObj
        write# addr 4# bytesObj32

        makePtr# addr


-- | Determine the total size of a raw data object.
sizeOfRaw [r : Region] (obj : Ptr# r Obj) : Nat#
 =      promote# (read# [Word32#] (takePtr# obj) 4#)


-- | Get the payload data from a raw object.
payloadOfRaw [r : Region] (obj : Ptr# r Obj) : Ptr# r Word8#
 =      plusPtr# (castPtr# obj) 8#


-- RawSmall -------------------------------------------------------------------
-- | A Small Raw object.
--   The object size is encoded as part of format field.
--   This saves us from needing to include a separate arity field.
--
--   The payload size must be no greater than 16, else undefined. 
--
--   typedef struct 
--   { uint32_t  tagFormat;  // Constructor tag and format field.
--     uint8_t   payload[];  // Raw data that does not contain heap pointers.
--   } DataRawSmall;
--
allocRawSmall
        [r : Region] 
        (tag : Tag#) (bytesPayload : Nat#) : Ptr# r Obj
 = do   
        bytesObj        = add# 4# bytesPayload

        case check# bytesObj of
         True#  -> ()
         False# -> allocCollect bytesObj

        allocRawSmall_ok tag bytesPayload bytesObj

allocRawSmall_ok
        [r : Region] 
        (tag : Tag#) (bytesPayload : Nat#) (bytesObj : Nat#) : Ptr# r Obj
 = do   
        addr            = alloc# bytesObj

        tag32           = promote#  tag
        bytesPayload32  = truncate# bytesPayload
        wordsPayload32  = shr#  bytesPayload32 2w32#
        format          = 0b0011w32#
        header          =  bor# (shl# tag32          8w32#) 
                          (bor# (shl# wordsPayload32 4w32#) format)
        write# addr 0# header

        makePtr# addr


-- | Determine the size of a raw small object.
sizeOfRawSmall [r : Region] (obj : Ptr# r Obj) : Nat#
 = do
        wordsPayload    = argOfObject obj
        bytesPayload    = shl# wordsPayload 2#

        bytesPayload


-- | Get the payload data from a raw small object.
payloadOfRawSmall [r : Region] (obj : Ptr# r Obj) : Ptr# r Word8#
 =      plusPtr# (castPtr# obj) 4#


-- Apply -----------------------------------------------------------------------
-- The apply family of functions work out how call the function in a thunk.
-- Some arguments come from in the thunk itself, while some can be provided
-- directly to the evaluators.
--
-- The hard limits are:
--   - The maximum arity for the function in a thunk is 12. 
--     See the comment on applyZ.
--   - The maximum number of directly applied arguments is 4, 
--     because we only have apply0 - apply4.
--
-- The choice of where to set the limit is a balance between being able to 
-- enumerate all possible calling conventions, and polluting the instruction
-- cache with code for too many evaluators.
--

----------------------------------------------------------- 0
-- | Apply (evaluate) a thunk, given no more arguments.
apply0   (t : Addr#) : Addr#
 = do
        p       = paramsOfThunkA t
        a       = argsOfThunk    (makePtr# t)
        case ge# a p of
         True#  -> eval0 t
         False# -> t


-- | Evaluate a saturate thunk, give no more arguments.
eval0    (t : Addr#) : Addr#
 = do   
        f       = funOfThunkA    t
        p       = paramsOfThunkA t
        a       = argsOfThunk    (makePtr# t)
        case p of
         0#     -> call0# f

         1#     -> call1# f        (fieldOfThunkA t 0#)

         2#     -> call2# f        (fieldOfThunkA t 0#) (fieldOfThunkA t 1#)

         3#     -> call3# f        (fieldOfThunkA t 0#) (fieldOfThunkA t 1#) 
                                   (fieldOfThunkA t 2#) 

         4#     -> call4# f        (fieldOfThunkA t 0#) (fieldOfThunkA t 1#) 
                                   (fieldOfThunkA t 2#) (fieldOfThunkA t 3#)

         _      -> evalZ  t f p    (fieldOfThunkA t (sub# a 4#))
                                   (fieldOfThunkA t (sub# a 3#))
                                   (fieldOfThunkA t (sub# a 2#))
                                   (fieldOfThunkA t (sub# a 1#))


----------------------------------------------------------- 1
-- | Apply a thunk to one more argument.
apply1   (t : Addr#) (arg0 : Addr#) : Addr#
 = do
        p       = paramsOfThunkA t
        a       = argsOfThunk    (makePtr# t)
        case ge# (add# a 1#) p of { True# ->
                eval1 t arg0;

        False#  ->
        do      t' = extendThunk (makePtr# t) 1#
                setFieldOfThunk t' a 0# arg0
                takePtr# t'
        }

-- | Evaluate a saturated thunk, given one more argument.
eval1    (t : Addr#) (arg0 : Addr#) : Addr#
 = do   
        f       = funOfThunkA    t
        p       = paramsOfThunkA t
        a       = argsOfThunk    (makePtr# t)
        case p of
         0#     -> apply1 (call0# f) arg0

         1#     -> call1# f          arg0

         2#     -> call2# f         (fieldOfThunkA t 0#)
                                     arg0

         3#     -> call3# f         (fieldOfThunkA t 0#) (fieldOfThunkA t 1#) 
                                     arg0

         4#     -> call4# f         (fieldOfThunkA t 0#) (fieldOfThunkA t 1#)
                                    (fieldOfThunkA t 2#)  arg0

         _      -> evalZ  t f p     (fieldOfThunkA t (sub# a 3#))
                                    (fieldOfThunkA t (sub# a 2#))
                                    (fieldOfThunkA t (sub# a 1#))
                                     arg0


----------------------------------------------------------- 2
apply2 (t : Addr#) (arg0 arg1 : Addr#) : Addr#
 = do   
        p       = paramsOfThunkA t
        a       = argsOfThunk    (makePtr# t)
        case ge# (add# a 2#) p of { True# ->
                eval2 t arg0 arg1;  

        False# -> 
        case ge# (add# a 1#) p of { True# ->
                apply1 (eval1 t arg0) arg1;

        False# ->
        do      t' = extendThunk (makePtr# t) 2#
                setFieldOfThunk t' a 0# arg0
                setFieldOfThunk t' a 1# arg1
                takePtr# t'
        }}


-- | Evaluate a saturated thunk, given two more arguments.
eval2  (t : Addr#) (arg0 arg1 : Addr#) : Addr#
 = do   
        f       = funOfThunkA   t
        p       = paramsOfThunkA t
        a       = argsOfThunk    (makePtr# t)
        case p of
         0#     -> apply2 (call0# f) arg0  arg1

         1#     -> apply1 (call1# f  arg0) arg1

         2#     -> call2# f         arg0  arg1

         3#     -> call3# f        (fieldOfThunkA t 0#)
                                    arg0  arg1

         4#     -> call4# f        (fieldOfThunkA t 0#) (fieldOfThunkA t 1#)
                                    arg0  arg1

         _      -> evalZ  t f p    (fieldOfThunkA t (sub# a 2#))
                                   (fieldOfThunkA t (sub# a 1#))
                                    arg0  arg1


----------------------------------------------------------- 3
-- | Apply a thunk to three more arguments.
apply3   (t : Addr#) (arg0 arg1 arg2 : Addr#) : Addr#
 = do
        p       = paramsOfThunkA t
        a       = argsOfThunk (makePtr# t)
        case ge# (add# a 3#) p of { True# ->
                eval3 t arg0 arg1 arg2;

        False# ->
        case ge# (add# a 2#) p of { True# ->
                apply1 (eval2 t arg0  arg1) arg2;

        False# ->
        case ge# (add# a 1#) p of { True# ->
                apply2 (eval1 t arg0) arg1  arg2;

        False# ->
        do      t' = extendThunk (makePtr# t) 3#
                setFieldOfThunk t' a 0# arg0
                setFieldOfThunk t' a 1# arg1
                setFieldOfThunk t' a 2# arg2
                takePtr# t'
        }}}


-- | Evaluate a saturated thunk, given three more arguments.
eval3    (t : Addr#) (arg0 arg1 arg2 : Addr#) : Addr#
 = do   
        f       = funOfThunkA    t
        p       = paramsOfThunkA t
        a       = argsOfThunk   (makePtr# t)
        case p of
         0#     -> apply3 (call0# f) arg0  arg1  arg2

         1#     -> apply2 (call1# f  arg0) arg1  arg2

         2#     -> apply1 (call2# f  arg0  arg1) arg2

         3#     -> call3# f          arg0  arg1  arg2

         4#     -> call4# f         (fieldOfThunkA t 0#)
                                     arg0  arg1  arg2

         _      -> evalZ  t f p     (fieldOfThunkA t (sub# a 1#))
                                     arg0  arg1  arg2


----------------------------------------------------------- 4
-- | Apply a thunk to four more arguments.
apply4   (t : Addr#) (arg0 arg1 arg2 arg3 : Addr#) : Addr#
 = do
        p       = paramsOfThunkA t
        a       = argsOfThunk (makePtr# t)
        case ge# (add# a 4#) p of { True# ->
                eval4 t arg0 arg1 arg2 arg3;

        False# ->
        case ge# (add# a 3#) p of { True# ->
                apply1 (eval3 t arg0  arg1  arg2) arg3;

        False# ->
        case ge# (add# a 2#) p of { True# ->
                apply2 (eval2 t arg0  arg1) arg2  arg3;

        False# ->
        case ge# (add# a 1#) p of { True# ->
                apply3 (eval1 t arg0) arg1  arg2  arg3;

        False# ->
        do      t' = extendThunk (makePtr# t) 4#
                setFieldOfThunk t' a 0# arg0
                setFieldOfThunk t' a 1# arg1
                setFieldOfThunk t' a 2# arg2
                setFieldOfThunk t' a 3# arg3
                takePtr# t'
        }}}}


-- | Evaluate a saturated thunk, given four more arguments.
eval4   (t : Addr#) (arg0 arg1 arg2 arg3 : Addr#) : Addr#
 = do   
        f       = funOfThunkA   t
        p       = paramsOfThunkA t
        case p of
         0#     -> apply4 (call0# f) arg0  arg1  arg2  arg3

         1#     -> apply3 (call1# f  arg0) arg1  arg2  arg3

         2#     -> apply2 (call2# f  arg0  arg1) arg2  arg3

         3#     -> apply1 (call3# f  arg0  arg1  arg2) arg3

         4#     -> call4# f          arg0  arg1  arg2  arg3

         _      -> evalZ  t f p      arg0  arg1  arg2  arg3


----------------------------------------------------------- Z
-- Evaluate a saturated thunk, given its last 4 arguments.
-- We read the first (n-4) arguments directly from the thunk.
--
-- In the object code, this function serves to enumerate the function calling
-- conventions for functions of 4-12 parameters. The fact that it stops at 12
-- places a hard limit on the arity of the core programs that we're prepared
-- to compile. Supers higher than this arity need to be transformed to take
-- some of their arguments from a tuple instead of as direct parameters.
--
-- In terms of the generated object program, we don't want to add more
-- alternatives here anyway because the underlying machine is unlikely to have
-- good calling convention when the object function has > 12 arguments. It
-- isn't useful for the 'arity' here to be more than the number of general
-- purpose registers we're likely to have in the machine. 
-- 
-- Note that some registers will also be needed for the stack pointer etc.
-- If the machine has 16 general purpose registers, then setting the maximum
-- arity here to 12 is probably enough.
--
evalZ  [r : Region]
        (t : Addr#) (fun : Addr#) (arity : Nat#)
        (argL3 argL2 argL1 argL0 : Addr#) 
        : Addr#

 = case arity of
         4#     -> call4# fun   argL3 argL2 argL1 argL0

         5#     -> call5# fun   (fieldOfThunkA t 0#) 
                                argL3 argL2 argL1 argL0

         6#     -> call6# fun   (fieldOfThunkA t 0#) (fieldOfThunkA t 1#)
                                argL3 argL2 argL1 argL0

         7#     -> call7# fun   (fieldOfThunkA t 0#) (fieldOfThunkA t 1#)
                                (fieldOfThunkA t 2#)
                                argL3 argL2 argL1 argL0

         8#     -> call8# fun   (fieldOfThunkA t 0#) (fieldOfThunkA t 1#)
                                (fieldOfThunkA t 2#) (fieldOfThunkA t 3#)
                                argL3 argL2 argL1 argL0

         9#     -> call9# fun   (fieldOfThunkA t 0#) (fieldOfThunkA t 1#)
                                (fieldOfThunkA t 2#) (fieldOfThunkA t 3#)
                                (fieldOfThunkA t 4#)
                                argL3 argL2 argL1 argL0

         10#    -> call10# fun  (fieldOfThunkA t 0#) (fieldOfThunkA t 1#)
                                (fieldOfThunkA t 2#) (fieldOfThunkA t 3#)
                                (fieldOfThunkA t 4#) (fieldOfThunkA t 5#)
                                argL3 argL2 argL1 argL0

         11#    -> call11# fun  (fieldOfThunkA t 0#) (fieldOfThunkA t 1#)
                                (fieldOfThunkA t 2#) (fieldOfThunkA t 3#)
                                (fieldOfThunkA t 4#) (fieldOfThunkA t 5#)
                                (fieldOfThunkA t 6#)
                                argL3 argL2 argL1 argL0

         12#    -> call12# fun  (fieldOfThunkA t 0#) (fieldOfThunkA t 1#)
                                (fieldOfThunkA t 2#) (fieldOfThunkA t 3#)
                                (fieldOfThunkA t 4#) (fieldOfThunkA t 5#)
                                (fieldOfThunkA t 6#) (fieldOfThunkA t 7#)
                                argL3 argL2 argL1 argL0

         _      -> fail#


-- Ref ------------------------------------------------------------------------
-- | Allocate a new reference to some boxed value.
allocRef [r1 r2 : Region] (val : Ptr# r2 Obj) : Ptr# r1 Obj
 = do   ref     = allocBoxed [r1] (truncate# 0#) 1#
        setFieldOfBoxed ref 0# val
        ref


-- | Write a value into reference.
writeRef [r1 r2 : Region] (ref : Ptr# r1 Obj) (val : Ptr# r2 Obj) : Void#
 =      setFieldOfBoxed ref 0# val


-- | Read the value from a reference.
readRef  [r1 r2 : Region] (ref : Ptr# r1 Obj) : Ptr# r2 Obj
 =      getFieldOfBoxed ref 0#


-- Array ----------------------------------------------------------------------
-- | Allocate an array of boxed values, consisting of the same element
--   for all positions.
allocArray 
        [r1 r2 : Region] [a : Data]
        (len : Nat#) (val : Ptr# r1 Obj) : Ptr# r2 Obj
 = do   arr     = allocBoxed [r2] (truncate# 0#) len
        fillArray arr 0# len val
        arr


-- | Write an element into an array.
writeArray 
        [r1 r2 : Region] 
        (arr : Ptr# r1 Obj) (ix : Nat#) (val : Ptr# r2 Obj) : Void#
 =      setFieldOfBoxed arr ix val


-- | Read an element from an array.
readArray 
        [r1 r2 : Region]
        (arr : Ptr# r1 Obj) (ix : Nat#) : Ptr# r2 Obj
 =      getFieldOfBoxed arr ix


-- | Fill all elements of an array with the same value.
fillArray
        [r1 r2 : Region] [a : Data]
        (arr : Ptr# r1 Obj) (start end : Nat#) (val : Ptr# r2 Obj) : Ptr# r1 Obj
 = case ge# start end of
        True#   -> arr
        False#  -> do
                setFieldOfBoxed arr start val
                fillArray arr (add# start 1#) end val


-- Block ----------------------------------------------------------------------
-- | Allocate a block of memory on the heap.
--   The object has a header word, but the payload is uninitialized.
allocBlock
        [r : Region] [a : Data] 
        (len : Nat#) : Ptr# r Obj
 =      allocRaw [r] (truncate# 0#) len


payloadOfBlock
        [r : Region]
        (chunk : Ptr# r Obj) : Ptr# r Word8#
 =      payloadOfRaw chunk

